import { addKeyword, EVENTS } from "@builderbot/bot";
import { MetaProvider } from "@builderbot/provider-meta";
import { InstagramWelcomeFlow } from "./InstagramWelcomeFlow";
import { ServiceSelectionFlow } from "./ServiceSelectionFlow";

// Flujo para manejar mensajes no reconocidos
export const FallbackFlow = addKeyword<MetaProvider>(EVENTS.ACTION)
  .addAction(async (ctx, { provider, gotoFlow }) => {
    try {

      // Solo enviar mensaje si han pasado m√°s de 5 minutos desde el √∫ltimo
      await provider.sendButtons(
        ctx.from,
        [
          { body: "Znapp" },
          { body: "Znapp Lite" },
          { body: "Otro tema" }
        ],
        "üëã ¬°Hola! Bienvenido/a a Znapp.\n\n¬øEn qu√© podemos ayudarte hoy?\n\n1Ô∏è‚É£ Znapp ‚Äì Necesito hacer tareas en campo y no tengo equipo propio\n\n2Ô∏è‚É£ Znapp Lite ‚Äì Tengo equipo en la calle y necesito organizar su trabajo\n\n3Ô∏è‚É£ Otro tema puntual (consult√° por ac√°)\n\nüí° Tambi√©n pod√©s escribir directamente tu consulta y te ayudaremos."
      );

      return gotoFlow(ServiceSelectionFlow);

    } catch (error) {
      console.error("[Error FallbackFlow]:", error);
      await provider.sendText(
        ctx.from,
        "No pudimos procesar tu mensaje. Por favor, intenta de nuevo o contanos en qu√© te podemos ayudar."
      );
    }
  })

// Flujo para manejar cualquier mensaje no capturado por otros flujos
export const CatchAllFlow = addKeyword<MetaProvider>([
  "ayuda", "help", "info", "informaci√≥n", "hola", "buenos d√≠as", "buenas tardes", "buenas noches"
]).addAction(async (ctx, { provider, gotoFlow }) => {
  try {
    const message = ctx.body.toLowerCase();

    // Si menciona Znapp o servicios espec√≠ficos, dirigir al flujo apropiado
    if (message.includes("znapp") && message.includes("informaci√≥n")) {
      return gotoFlow(InstagramWelcomeFlow);
    }

    // Si menciona equipo o team, sugerir Znapp Lite
    if (message.includes("equipo") || message.includes("team") || message.includes("gesti√≥n")) {
      await provider.sendText(
        ctx.from,
        "üéØ Parece que podr√≠as estar interesado en Znapp Lite, nuestra soluci√≥n para gestionar equipos en campo.\n\n¬øTe gustar√≠a saber m√°s sobre este servicio?\n\n1Ô∏è‚É£ S√≠, contame sobre Znapp Lite\n2Ô∏è‚É£ No, quiero ver todas las opciones"
      );
      return;
    }

    // Respuesta general para otros casos
    await provider.sendText(
      ctx.from,
      "üëã ¬°Gracias por contactarte!\n\nPara brindarte la mejor ayuda, eleg√≠ una opci√≥n:\n\n1Ô∏è‚É£ Znapp ‚Äì Necesito hacer tareas en campo y no tengo equipo propio\n\n2Ô∏è‚É£ Znapp Lite ‚Äì Tengo equipo en la calle y necesito organizar su trabajo\n\n3Ô∏è‚É£ Hablar con una persona del equipo\n\n¬øCu√°l te interesa m√°s?"
    );

    // Redirigir al flujo de selecci√≥n de servicios
    return gotoFlow(ServiceSelectionFlow);

  } catch (error) {
    console.error("[Error CatchAllFlow]:", error);
    await provider.sendText(
      ctx.from,
      "Disculp√°, hubo un problema. ¬øPodr√≠as intentar de nuevo o contarme en qu√© te puedo ayudar?"
    );
  }
});
